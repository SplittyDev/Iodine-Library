
###
# Name          : json
# Author        : @GruntTheDivine
# Description   : Simpe JSON library
####

enum JSONTokenType {
    OPEN_BRACE,
    CLOSE_BRACE,
    OPEN_BRACKET,
    CLOSE_BRACKET,
    COLON,
    COMMA,
    STRING_LIT,
    INT_LIT,
    BOOLEAN
}

class JSONToken {
    func JSONToken (self, type, value) {
        self.type = type;
        self.value = value;
    }
}

class JSONTokenStream {
    func JSONTokenStream (self) {
        self.tokens = List ();
        self.position = 0;
    }
    
    func add (self, token) {
        self.tokens.add (token);
    }
    
    func match (self, type) {
        return self.peekToken ().type == type;
    }
    
    func expect (self, type) {
        if (self.readToken ().type != type) {
            raise Exception ("");
        }
    }
    
    func peekToken (self) {
        return self.tokens [self.position];
    }
    
    func readToken (self) {
        self.position += 1;
        return self.tokens [self.position - 1];
    }
}

class JSONParser {
    func JSONParser (self, input) {
        self.input = input;
        self.position = 0;
        self.length = input.getSize ();
        self.tokenStream = JSONTokenStream ();
    }
    
    func parse (self) {
        return self.parseJsonItem (self.scan ());
    }
    
    func parseJsonItem (self) {
        if (self.tokenStream.match (JSONTokenType.OPEN_BRACE)) {
            return self.parseJsonMap (self.tokenStream);
        } else if (self.tokenStream.match (JSONTokenType.OPEN_BRACKET)) {
            return self.parseJsonList (self.tokenStream);
        } else if (self.tokenStream.match (JSONTokenType.STRING_LIT)) {
            return self.tokenStream.readToken ().value;
        } else if (self.tokenStream.match (JSONTokenType.INT_LIT)) {
            return self.tokenStream.readToken ().value;
        } else if (self.tokenStream.match (JSONTokenType.BOOLEAN)) {
            return self.tokenStream.readToken ().value;
        } 
        raise Exception ("Invalid or corrupted JSON file!");
    }

    func parseJsonList (self) {
        self.tokenStream.expect (JSONTokenType.OPEN_BRACKET);
        ret = List ();
        while (!self.tokenStream.match (JSONTokenType.CLOSE_BRACKET)) {
            ret.add (self.parseJsonItem (self.tokenStream));
            if (self.tokenStream.match (JSONTokenType.COMMA)) {
                self.tokenStream.readToken ();
            } else {
                break;
            }
        }
        self.tokenStream.expect (JSONTokenType.CLOSE_BRACKET);
        return ret;
    }

    func parseJsonMap (self) {
        self.tokenStream.expect (JSONTokenType.OPEN_BRACE);
        ret = HashMap ();
        while (!self.tokenStream.match (JSONTokenType.CLOSE_BRACE)) {
            if (self.tokenStream.match (JSONTokenType.STRING_LIT)) {
                name = self.tokenStream.readToken ().value;
                self.tokenStream.expect (JSONTokenType.COLON);
                ret[name] = self.parseJsonItem (self.tokenStream);
            } else if (self.tokenStream.match (JSONTokenType.COMMA)) {
                self.tokenStream.readToken ();
            } else {
                break;
            }
        }
        self.tokenStream.expect (JSONTokenType.CLOSE_BRACE);
        return ret;
    }
    
    func scan (self) {
        while (self.length > self.position) {
            if (self.peekChar () == "{") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.OPEN_BRACE, "{"));
            } else if (self.peekChar () == "}") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.CLOSE_BRACE, "}"));
            } else if (self.peekChar () == "[") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.OPEN_BRACKET, "["));
            } else if (self.peekChar () == "]") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.CLOSE_BRACKET, "]"));
            } else if (self.peekChar () == ":") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.COLON, ":"));
            } else if (self.peekChar () == ",") {
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.COMMA, ","));
            } else if (self.peekChar () == "\"") {
                self.readChar ();
                accum = "";
                while (self.peekChar () != "\"") {
                    accum += self.readChar ();
                }
                self.readChar ();
                self.tokenStream.add (JSONToken (JSONTokenType.STRING_LIT, accum));
            } else if (self.peekChar ().isDigit ()) {
                accum = "";
                while (self.peekChar ().isDigit ()) {
                    accum += self.readChar ()
                }
                self.tokenStream.add (JSONToken (JSONTokenType.INT_LIT, Int (accum)));
            } else if (self.peekChar ().isLetter ()) {
                accum = "";
                while (self.peekChar ().isLetter ()) {
                    accum += self.readChar ();
                }
                if (accum == "true") {
                    self.tokenStream.add (JSONToken (JSONTokenType.BOOLEAN, true));
                } else if (accum == "false") {
                    self.tokenStream.add (JSONToken (JSONTokenType.BOOLEAN, false));
                }

            } else if (self.peekChar ().isWhiteSpace ()) {
                self.readChar ();
            } else {
                return;
            }
        }
    }
    
    func readChar (self) {
        self.position += 1;
        return self.input [self.position - 1];
    }
    
    func peekChar (self) {
        return self.input [self.position];
    }
}

func parse (json) {
    myParser = JSONParser (json);
    return myParser.parse ();
}

func dump (item) {
    return _dump (item);
}

func _dump (item) {
    if (item is List) {
        items = map (item, lambda (x) => {
            return _dump (x);
        });
        return "[{}]".format (",".join (items));
    } else if (item is HashMap) {
        items = map (item, lambda (x) => {
           return _dump (x) + " : " + _dump (item [x]);
        });
        return "{" + ",".join (items) + "}";
    } else if (item is Int) {
        return Str (item);
    } else if (item is Bool) {
        if (item) {
            return "true";
        } else {
            return "false";
        }
    }
    return "\"{}\"".format (Str (item));
}

func _dumpList (item) {
    return "[{}]".format (",".join (item));
}