use testing;

func main () {
    assert = testing.assert ();
    assert.add (objectTest);
    assert.add (instanceOfTest);
    assert.add (inheritanceTest);
    assert.add (polymorphismTest);
    assert.add (functionTest);
    assert.add (nestedClassTest);
    assert.add (closureTest);
    assert.add (lambdaTest);
    assert.add (tryTest);
    assert.add (whileTest);
    assert.add (ifTest);
    assert.add (forTest);
    assert.add (exprTests);
    assert.run ();
}


# Class to use in unit tests
class FooClass {
    func FooClass (self, value) {
        self.value = value;
    }

    func getValue (self) {
        return self.value;
    }
}

class BarClass : FooClass {
    func BarClass (self, a, b) {
        super (a + b);
    }
}

class BazClass : FooClass {
    func BazClass (self, value, newValue) {
        super (value);
        self.newValue = newValue;
    }

    func getValue (self) {
        return self.newValue;
    }
}

func objectTest (assert) {
    myObj = FooClass (10);
    assert.eq (myObj.getValue (), 10, "Object test");
}

func inheritanceTest (assert) {
    myObj = BarClass (2, 3);
    assert.eq (myObj.getValue (), 5, "Inheritance test");
}

func instanceOfTest (assert) {
    fooObj = FooClass (10);
    myObj = BarClass (2, 3);
    result = (myObj is FooClass && myObj is BarClass) && (fooObj is FooClass && !(fooObj is BarClass));
    assert.eq (result, true, "is operator test"); 
}

func polymorphismTest (assert) {
    bazObj = BazClass (10, 13);
    assert.eq (bazObj.getValue (), 13, "Polymorphism test");
}

func nestedClassTest (assert) {
    class MyClass {
        func MyClass (self, value) {
            self.value = value;
        }
        
        func getValue (self) {
            return 13;#self.value;
        }
    }
    
    myObj = MyClass (13);
    assert.eq (myObj.getValue (), 13, "Nested class test");
}

func functionTest (assert) {
    func myFunc (x, y) {
        return x * y;
    }

    assert.eq (myFunc (2, 4), 8, "Nested functions test");
}

func closureTest (assert) {
    func startAt (x) {
        func incrementBy (y) {
            return x + y;
        }
        return incrementBy;
    }
    
    closure = startAt (1);
    assert.eq (closure (3), 4, "Closure test");
}

func lambdaTest (assert) {
    myLambda = lambda (x) => { 
        return x * 10;
    };
    assert.eq (myLambda (2), 20, "Lambda expression test");
}

func tryTest (assert) {
    myInt = 0;
    caught = false;
    try {
        try {
            myInt.thisDoesNotExist;
        } except (e as AttributeNotFoundException) {
            caught = true;
        }
    } except (b) {
     
    }
  
    assert.eq (caught, true, "try/except statement test");
}

func ifTest (assert) {
    result = 0;
    if (result == 0) {
        result = 1;
    } else {
        result = 0;
    }

    assert.eq (result, 1, "If statement test");
}

func whileTest (assert) {
    counter = 0;
    while (counter < 10) {
        counter += 1;
    }
    assert.eq (counter, 10, "While statement test");
}

func forTest (assert) {
    counter = 0;
    for (i = 0; i < 10; i += 1) {
        counter = i;
    }
    assert.eq (counter, 9, "For statement test");
}

# Test expressions
func exprTests (assert) {
    a = 2;
    b = 4;
    c = 2;
    d = 3;
    e = 6;
    f = 128;
    g = 64;
    expr = a * b % c << d ^ e >> d / a & f - a | g;
    assert.eq (expr, 66, "Operator precedence test");
}
