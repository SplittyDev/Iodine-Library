

class Array {
    func Array (self, type, n) {
        self._list = [];
        if (n is Int) {
            foreach (i in 0 .. n) {
                self._list.add (null);
            }
        } else {
            foreach (i in n) {
                if (i isnot type) {
                    raise TypeException (Str (type));
                }
                self._list.add (i);
            }
        }
    }

    func __setIndex__ (self, index, value) {
        if (value isnot self._type) {
            raise TypeException (Str (self._type));
        }
        self._list [index] = value;
    }

    func __getIndex__ (self, index) {
        return self._list [index];
    }

    func __iter__ (self) {
        return self._list.__iter__ ();
    }
}


class Stack {
    func Stack (self) {
        self._list = [];
        self._top = 0;
    }

    func push (self, item) {
        self._list.add (item); 
        self._top += 1;
    }

    func pop (self) {
        top = self._list [self._top - 1];
        self._list.removeAt (self._top - 1);
        self._top -= 1;
        return top;
    }

    func __iter__ (self) {
        return self._list.__iter__ ();
    }
}

class Queue {
    func Queue (self) {
        self._list = [];
    }

    func enqueue (self, item) {
        self._list.add (item);
    }

    func dequeue (self) {
        val = self._list [0];
        self._list.removeAt (0);
        return val;
    }

    func __iter__ (self) {
        return self._list.__iter__ ();
    }
}

class TypedList : List {
    func TypedList (self, type) {
        self._type = type;
    }

    func add (self, item) {
        if (item isnot self._type) {
            raise TypeException (Str (self._type));
        }

        self.__super__.add (item);
    }

    func addRange (self, items) {
        foreach (item in items) {
            if (item isnot self._type) {
                raise TypeException (Str (self._type));
            }
            self.__super__.add (item);
        }
    }

    func __setIndex__ (self, index, value) {
        if (value isnot self._type) {
            raise TypeException (Str (self._type));
        }
        self.__super__ [index] = value;
    }
}

