use core
use testing

func main (args) {
  assert = testing.assert ()
  assert.add (core_test_len_string)
  assert.add (core_test_len_list)
  assert.add (core_test_len_tuple)
  assert.add (core_test_len_hashmap)
  assert.add (core_test_reverse_string)
  assert.add (core_test_reverse_list)
  assert.add (core_test_reverse_tuple)
  assert.run ()
}

func core_test_len_string (assert) {
  str = core.len ("Hello, World!")
  exp = 13
  assert.eq (exp, str, "Len function on string")
}

func core_test_len_list (assert) {
  lst = core.len ({"a", "b", "c", "d", "e", "f"})
  exp = 6
  assert.eq (exp, lst, "Len function on list")
}

func core_test_len_tuple (assert) {
  tpl = core.len (("a", "b", "c", "d", "e", "f"))
  exp = 6
  assert.eq (exp, tpl, "Len function on tuple")
}

func core_test_len_hashmap (assert) {
  dict = HashMap ()
  dict["x"] = 1
  dict["y"] = 2
  exp = 2
  assert.eq (exp, core.len (dict), "Len function on hashmap")
}

func core_test_reverse_string (assert) {
  str = core.reverse ("Hello, World!")
  exp = "!dlroW ,olleH"
  assert.eq (exp, str, "Reverse function on string")
}

func core_test_reverse_list (assert) {
  lst = core.reverse ({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})
  exp = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
  assert.eq (exp, lst, "Reverse function on list")
}

func core_test_reverse_tuple (assert) {
  tpl = core.reverse ((0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
  exp = (9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
  assert.eq (exp, tpl, "Reverse function on tuple")
}
