###
# Name        : stack
# Author      : @SplittyDev
# Description : Stack data structure
# Please add yourself as author if you make changes
###

use * from core

class Stack {
  func Stack (self) {
    self.store = List ()
    self.iter_index = 0
  }

  func push (self, val) {
    self.store.add (val)
  }

  func pop (self) {
    if (len (self.store) == 0)
      raise ("There are no elements on the stack!")
    tmp = reverse (self.store)
    val = tmp[0]
    tmp.removeAt (0)
    self.store = reverse (tmp)
    return val
  }

  func _iterReset (self) {
    self.iter_index = len (self.store) - 1
  }

  func _iterMoveNext (self) {
    self.iter_index -= 1
    return self.iter_index >= 0
  }

  func _iterGetNext (self) {
    return self.store[self.iter_index]
  }
}

class TypedStack {
  func TypedStack (self, t) {
    self.store = Stack ()
    t = Str(t).toLower()
    if (t == "str")
      self.t = Str
    else if (t == "int")
      self.t = Int
    else if (t == "list")
      self.t = List
    else
      raise (sprintf ("Unsupported type: {}", t))
  }

  func push (self, val) {
    self.store.push (self.t (val))
  }

  func pop (self) {
    return self.store.pop ()
  }

  func _iterReset (self) {
    self.store._iterReset ()
  }

  func _iterMoveNext (self) {
    return self.store._iterMoveNext ()
  }

  func _iterGetNext (self) {
    return self.store._iterGetnext ()
  }
}
