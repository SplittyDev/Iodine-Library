class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>ArgumentException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>AttributeNotFoundException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>BigInt</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>Bool</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>Bytes</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>chr</code></strong> (num)<br>
<div style='position: relative; padding-left:50px;'>
Returns the character representation of a specified integer.<br>
<table><tr><td><code>num</code></td><td>The numerical UTF-16 code</td>
</tr></br></table></div><br/><strong><code>compile</code></strong> (source)<br>
<div style='position: relative; padding-left:50px;'>
Compiles a string of iodine code, returning a callableobject.<br>
<table><tr><td><code>source</code></td><td>The source code to compile.</td>
</tr></br></table></div><br/>class <strong><code>Complex</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>Dict</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/><strong><code>contains</code></strong> (key)<br>
<div style='position: relative; padding-left:50px;'>
Tests to see if the dictionary contains a key, returning true if it does.<br>
<table><tr><td><code>key</code></td><td>The key to test if this dictionary contains.</td>
</tr></br></table></div><br/><strong><code>clear</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Clears the dictionary, removing all items.<br>
<table></table></div><br/><strong><code>set</code></strong> (key, value)<br>
<div style='position: relative; padding-left:50px;'>
Sets a key to a specified value, if the key does not exist, it will be created.<br>
<table><tr><td><code>key</code></td><td>The key of the specified value</td>
</tr></br><tr><td><code>value</code></td><td>The value associated with [key]</td>
</tr></br></table></div><br/><strong><code>get</code></strong> (key)<br>
<div style='position: relative; padding-left:50px;'>
Returns the value specified by [key], raising a KeyNotFound exception if the given key does not exist.<br>
<table><tr><td><code>key</code></td><td>The key whose value will be returned.</td>
</tr></br></table></div><br/><strong><code>remove</code></strong> (key)<br>
<div style='position: relative; padding-left:50px;'>
Removes a specified entry from the dictionary, raising a KeyNotFound exception if the given key does not exist.<br>
<table><tr><td><code>key</code></td><td>The key which is to be removed.</td>
</tr></br></table></div><br/></div><br/><strong><code>eval</code></strong> (source)<br>
<div style='position: relative; padding-left:50px;'>
Evaluates a string of Iodine source code.<br>
<table><tr><td><code>source</code></td><td>The source code to be evaluated.</td>
</tr></br></table></div><br/>class <strong><code>Exception</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>File</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/><strong><code>write</code></strong> (obj)<br>
<div style='position: relative; padding-left:50px;'>
Writes an object to the underlying stream.<br>
<table><tr><td><code>obj</code></td><td>The object to be written.</td>
</tr></br></table></div><br/><strong><code>writeln</code></strong> (obj)<br>
<div style='position: relative; padding-left:50px;'>
Writes an object to the stream, appending a new line character to the end of the file.<br>
<table><tr><td><code>obj</code></td><td>The object to be written.</td>
</tr></br></table></div><br/><strong><code>read</code></strong> (n)<br>
<div style='position: relative; padding-left:50px;'>
Reads [n] bytes from the underlying stream.<br>
<table><tr><td><code>n</code></td><td>How many bytes to read</td>
</tr></br></table></div><br/><strong><code>readln</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Reads a single line from the underlying stream.<br>
<table></table></div><br/><strong><code>close</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Closes the stream.<br>
<table></table></div><br/><strong><code>flush</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Flushes the underlying stream.<br>
<table></table></div><br/><strong><code>readall</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Reads all text.<br>
<table></table></div><br/></div><br/><strong><code>filter</code></strong> (iterable, callable)<br>
<div style='position: relative; padding-left:50px;'>
Iterates over the specified iterable, passing the result of each iteration to the specified callable. If the callable returns true, the result is appended to a list that is returned to the caller.<br>
<table><tr><td><code>iterable</code></td><td>The iterable to be iterated over.</td>
</tr></br><tr><td><code>callable</code></td><td>The callable to be used for filtering.</td>
</tr></br></table></div><br/>class <strong><code>Float</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>hex</code></strong> (obj)<br>
<div style='position: relative; padding-left:50px;'>
Returns hexadecimal representation of a specified object,supports both Bytes and Str objects.<br>
<table><tr><td><code>obj</code></td><td>The object to convert into a hex string.</td>
</tr></br></table></div><br/>class <strong><code>IndexException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>input</code></strong> (prompt)<br>
<div style='position: relative; padding-left:50px;'>
Reads from the standard input stream. Optionally displays the specified prompt.<br>
<table><tr><td><code>prompt</code></td><td>Optional prompt to display</td>
</tr></br></table></div><br/>class <strong><code>Int</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>InternalException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>invoke</code></strong> (callable, dict)<br>
<div style='position: relative; padding-left:50px;'>
Invokes the specified callable under a new Iodine context.Optionally uses the specified dict as the instance's global symbol table.<br>
<table><tr><td><code>callable</code></td><td>The calalble to be invoked</td>
</tr></br><tr><td><code>dict</code></td><td>The global symbol table to be used</td>
</tr></br></table></div><br/>class <strong><code>IOException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>KeyNotFoundException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>len</code></strong> (countable)<br>
<div style='position: relative; padding-left:50px;'>
Returns the length of the specified object. If the object does not implement __len__, an AttributeNotFoundException is raised.<br>
<table><tr><td><code>countable</code></td><td>The object whose length is to be determined.</td>
</tr></br></table></div><br/>class <strong><code>List</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/><strong><code>append</code></strong> (*args)<br>
<div style='position: relative; padding-left:50px;'>
Appends each argument to the end of the list<br>
<table><tr><td><code>*args</code></td><td>The objects to be appended to the list</td>
</tr></br></table></div><br/><strong><code>prepend</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Prepends an item to the beginning of the list.<br>
<table><tr><td><code>item</code></td><td>The item to be inserted into the beginning of the list.</td>
</tr></br></table></div><br/><strong><code>appendrange</code></strong> (iterable)<br>
<div style='position: relative; padding-left:50px;'>
Iterates through the supplied arguments, adding each item to the end of the list.<br>
<table><tr><td><code>iterable</code></td><td>The iterable object to be used.</td>
</tr></br></table></div><br/><strong><code>discard</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Removes an item from the list, returning true if success, otherwise, false.<br>
<table><tr><td><code>item</code></td><td>The item to be discarded.</td>
</tr></br></table></div><br/><strong><code>remove</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Removes an item from the list, raising a KeyNotFound exception if the list does not contain [item].<br>
<table><tr><td><code>item</code></td><td>The item to be discarded.</td>
</tr></br></table></div><br/><strong><code>removeat</code></strong> (index)<br>
<div style='position: relative; padding-left:50px;'>
Removes an item at a specified index.<br>
<table><tr><td><code>index</code></td><td>The 0 based index of the item which is to be removed.</td>
</tr></br></table></div><br/><strong><code>contains</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Returns true if the supplied argument can be fund within the list.<br>
<table><tr><td><code>item</code></td><td>The item to test whether or not this list contains.</td>
</tr></br></table></div><br/><strong><code>clear</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Clears the list, removing all items from it.<br>
<table></table></div><br/><strong><code>index</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the first occurance of the supplied argument, raising a KeyNotFound exception  if the supplied argument cannot be found.<br>
<table><tr><td><code>item</code></td><td>The whose index will be returned.</td>
</tr></br></table></div><br/><strong><code>rindex</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the last occurance of the supplied argument, raising a KeyNotFound exception  if the supplied argument cannot be found.<br>
<table><tr><td><code>item</code></td><td>The whose index will be returned.</td>
</tr></br></table></div><br/><strong><code>find</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the first occurance of the supplied argument, returning -1  if the supplied argument cannot be found.<br>
<table><tr><td><code>item</code></td><td>The whose index will be returned.</td>
</tr></br></table></div><br/><strong><code>rfind</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the last occurance of the supplied argument, returning -1  if the supplied argument cannot be found.<br>
<table><tr><td><code>item</code></td><td>The whose index will be returned.</td>
</tr></br></table></div><br/></div><br/><strong><code>map</code></strong> (iterable, callable)<br>
<div style='position: relative; padding-left:50px;'>
Iterates over the specified iterable, passing the result of each iteration to the specified callable. The result of the specified callable is added to a list that is returned to the caller.<br>
<table><tr><td><code>iterable</code></td><td>The iterable to be iterated over.</td>
</tr></br><tr><td><code>callable</code></td><td>The callable to be used for mapping.</td>
</tr></br></table></div><br/>class <strong><code>NotSupportedException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>Null</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>open</code></strong> (file, mode)<br>
<div style='position: relative; padding-left:50px;'>
Opens up a file using the specified mode, returning a new stream object.@list Supported modes@item r - Read@item w - Write@item a - Append@item b - Binary <br>
<table><tr><td><code>file</code></td><td>The filename</td>
</tr></br><tr><td><code>mode</code></td><td>The mode.</td>
</tr></br></table></div><br/><strong><code>ord</code></strong> (char)<br>
<div style='position: relative; padding-left:50px;'>
Returns the numeric representation of a character.<br>
<table><tr><td><code>char</code></td><td>The character</td>
</tr></br></table></div><br/><strong><code>print</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Prints a string to the standard output streamand appends a newline character.@variadic Object Anything<br>
<table></table></div><br/><strong><code>property</code></strong> (getter, setter)<br>
<div style='position: relative; padding-left:50px;'>
Returns a new Property object.<br>
<table><tr><td><code>getter</code></td><td>The getter for this property.</td>
</tr></br><tr><td><code>setter</code></td><td>The setter for this property.</td>
</tr></br></table></div><br/>class <strong><code>Property</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>range</code></strong> (start, end, step)<br>
<div style='position: relative; padding-left:50px;'>
Returns an iterable sequence containing [n] items, starting with 0 and incrementing by 1, until [n] is reached.<br>
<table><tr><td><code>start</code></td><td>The first number in the sequence (Or, last if no other arguments are supplied)</td>
</tr></br><tr><td><code>end</code></td><td>Last number in the sequence (Optional)</td>
</tr></br><tr><td><code>step</code></td><td>By how much the current number increases every step to reach [end] (Optional)</td>
</tr></br></table></div><br/><strong><code>reduce</code></strong> (iterable, callable, default)<br>
<div style='position: relative; padding-left:50px;'>
Reduces all members of the specified iterable by applying the specified callable to each item left to right. The callable passed to reduce receives two arguments, the first one being the result of the last call to it and the second one being the current item from the iterable.<br>
<table><tr><td><code>iterable</code></td><td>The iterable to be iterated over.</td>
</tr></br><tr><td><code>callable</code></td><td>The callable to be used for reduced.</td>
</tr></br><tr><td><code>default</code></td><td>The default item.</td>
</tr></br></table></div><br/><strong><code>repr</code></strong> (object)<br>
<div style='position: relative; padding-left:50px;'>
Returns a string representation of the specified object, which is obtained by calling its __repr__ function. If the object does not implement the __repr__ function, its default string representation is returned.<br>
<table><tr><td><code>object</code></td><td>The object to be represented</td>
</tr></br></table></div><br/><strong><code>require</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Internal function used by the 'use' statement, do not call this directly.<br>
<table></table></div><br/><strong><code>sort</code></strong> (iterable, [key])<br>
<div style='position: relative; padding-left:50px;'>
Returns an sorted tuple created from an iterable sequence. An optional function can be provided that can be used to sort the iterable sequence.<br>
<table><tr><td><code>iterable</code></td><td>The iterable to be sorted</td>
</tr></br><tr><td><code>[key]</code></td><td>The function which will return a key (Optional)</td>
</tr></br></table></div><br/>class <strong><code>Str</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/><strong><code>lower</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns the lowercase representation of this string<br>
<table></table></div><br/><strong><code>upper</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns the uppercase representation of this string<br>
<table></table></div><br/><strong><code>substr</code></strong> (start, end)<br>
<div style='position: relative; padding-left:50px;'>
Returns a substring contained within this string.@returns The substring between start and end<br>
<table><tr><td><code>start</code></td><td>The starting index.</td>
</tr></br><tr><td><code>end</code></td><td>The ending index (Default is the length of the string)</td>
</tr></br></table></div><br/><strong><code>index</code></strong> (substring)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the first occurance of a string within this string. Raises KeyNotFound exception if the specified substring does not exist.<br>
<table><tr><td><code>substring</code></td><td>The string to find.</td>
</tr></br></table></div><br/><strong><code>rindex</code></strong> (substring)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the last occurance of a string within this string. Raises KeyNotFound exception if the specified substring does not exist.<br>
<table><tr><td><code>substring</code></td><td>The string to find.</td>
</tr></br></table></div><br/><strong><code>find</code></strong> (substring)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the first occurance of a string within this string. Returns -1 if the specified substring does not exist.<br>
<table><tr><td><code>substring</code></td><td>The string to find.</td>
</tr></br></table></div><br/><strong><code>rfind</code></strong> (substring)<br>
<div style='position: relative; padding-left:50px;'>
Returns the index of the last occurance of a string within this string. Returns -1 if the specified substring does not exist.<br>
<table><tr><td><code>substring</code></td><td>The string to find.</td>
</tr></br></table></div><br/><strong><code>contains</code></strong> (value)<br>
<div style='position: relative; padding-left:50px;'>
Returns true if the string contains the specified value. <br>
<table><tr><td><code>value</code></td><td>The value that this string must contain to return true.</td>
</tr></br></table></div><br/><strong><code>replace</code></strong> (str1, str2)<br>
<div style='position: relative; padding-left:50px;'>
Returns a new string where call occurances of [str1] have been replaced with [str2].<br>
<table><tr><td><code>str1</code></td><td>The value that will be replaced.</td>
</tr></br><tr><td><code>str2</code></td><td>The value to replace [str1] with.</td>
</tr></br></table></div><br/><strong><code>startswith</code></strong> (value)<br>
<div style='position: relative; padding-left:50px;'>
Returns true if the string starts with the specified value.<br>
<table><tr><td><code>value</code></td><td>The value that this string must start with to return true.</td>
</tr></br></table></div><br/><strong><code>endswith</code></strong> (value)<br>
<div style='position: relative; padding-left:50px;'>
Returns true if the string ends with the specified value.<br>
<table><tr><td><code>value</code></td><td>The value that this string must end with to return true.</td>
</tr></br></table></div><br/><strong><code>split</code></strong> (seperator)<br>
<div style='position: relative; padding-left:50px;'>
Returns a list containing every substring between [seperator].<br>
<table><tr><td><code>seperator</code></td><td>The seperator to split this string by.</td>
</tr></br></table></div><br/><strong><code>join</code></strong> (*args)<br>
<div style='position: relative; padding-left:50px;'>
Joins all arguments together, returning a string where this string has been placed between all supplied arguments<br>
<table><tr><td><code>*args</code></td><td>Arguments to join together using this string as a seperator.</td>
</tr></br></table></div><br/><strong><code>trim</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns a string where all leading whitespace characters have been removed.<br>
<table></table></div><br/><strong><code>isalpha</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns true if all characters in this string are letters.<br>
<table></table></div><br/><strong><code>isdigit</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns true if all characters in this string are digits.<br>
<table></table></div><br/><strong><code>isalnum</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns true if all characters in this string are letters or digits.<br>
<table></table></div><br/><strong><code>iswhitespace</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns true if all characters in this string are white space characters.<br>
<table></table></div><br/><strong><code>issymbol</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Returns true if all characters in this string are symbols.<br>
<table></table></div><br/><strong><code>ljust</code></strong> (n, c)<br>
<div style='position: relative; padding-left:50px;'>
Returns a string that has been justified by [n] characters to right.<br>
<table><tr><td><code>n</code></td><td>How much to justify this string.</td>
</tr></br><tr><td><code>c</code></td><td>The string to use as padding (Default is whitespace).</td>
</tr></br></table></div><br/><strong><code>rjust</code></strong> (n, c)<br>
<div style='position: relative; padding-left:50px;'>
Returns a string that has been justified by [n] characters to left.<br>
<table><tr><td><code>n</code></td><td>How much to justify this string.</td>
</tr></br><tr><td><code>c</code></td><td>The string to use as padding (Default is whitespace).</td>
</tr></br></table></div><br/></div><br/>class <strong><code>StringBuffer</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/><strong><code>clear</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
Clears the string buffer.<br>
<table></table></div><br/><strong><code>append</code></strong> (*args)<br>
<div style='position: relative; padding-left:50px;'>
Appends each argument to the end of the string buffer.<br>
<table><tr><td><code>*args</code></td><td>Each item to append to the end of the buffer.</td>
</tr></br></table></div><br/><strong><code>prepend</code></strong> (item)<br>
<div style='position: relative; padding-left:50px;'>
Prepends text to the beginning of the string buffer.<br>
<table><tr><td><code>item</code></td><td>The item to append.</td>
</tr></br></table></div><br/></div><br/><strong><code>sum</code></strong> (iterable, default)<br>
<div style='position: relative; padding-left:50px;'>
Reduces the iterable by adding each item together, starting with [default].<br>
<table><tr><td><code>iterable</code></td><td>The iterable to be summed up</td>
</tr></br><tr><td><code>default</code></td><td>The default item (Optional)</td>
</tr></br></table></div><br/>class <strong><code>SyntaxException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>Tuple</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>type</code></strong> (object)<br>
<div style='position: relative; padding-left:50px;'>
Returns the type definition of the specified object.<br>
<table><tr><td><code>object</code></td><td>The object whose type is to be determined.</td>
</tr></br></table></div><br/><strong><code>typecast</code></strong> (type, object)<br>
<div style='position: relative; padding-left:50px;'>
Performs a sanity check, verifying that the specified [object] is an instance of [type]. If the test fails, a TypeCastException is raised.<br>
<table><tr><td><code>type</code></td><td>The type to be tested against</td>
</tr></br><tr><td><code>object</code></td><td>The object to be tested</td>
</tr></br></table></div><br/>class <strong><code>TypeCastException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/>class <strong><code>TypeDef</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/>class <strong><code>TypeException</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table>class <strong><code>__type__</code></strong> ()<br>
<div style='position: relative; padding-left:50px;'>
<br>
<table></table></div><br/></div><br/><strong><code>zip</code></strong> (iterables)<br>
<div style='position: relative; padding-left:50px;'>
Iterates over each iterable in [iterables], appending every item to a tuple, that is then appended to a list which is returned to the caller.<br>
<table><tr><td><code>iterables</code></td><td>The iterables to be zipped</td>
</tr></br></table></div><br/>

